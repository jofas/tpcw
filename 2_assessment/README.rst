tpp coursework II
=================

Implementation of the affinity schedule. Contains two versions
of the schedule, one version ``naive``, which uses brute force
to determine the split with the most iterations left and
``queue``, which uses a constantly updated priority queue to
determine the split with the most ierations left.

Build
-----

From the terminal execute:

.. code:: bash

   cd path/to/the/project
   make

This will generate a ``bin`` folder containing two
executables ``bin/main_naive`` and ``bin/main_queue``, which
execute the said implementation of the affinity schedule on
the ``loops`` program.

By default, ``make`` will use ``gfortran`` for compiling.
This can be changed by adjusting the ``FC`` and ``FFLAGS``
variables, either from the command line or in the ``Makefile``.


Project structure
-----------------

* ``src/``

  directory containing the source code.

  + ``affinity_schedule.f90``

    contains the source code for the affinity schedule (the
    one based on the priority queue.

  + ``naive_affinity_schedule.f90``

    the affinity schedule using brute force instead of a
    priority queue to determine the split with the most
    iterations left.

  + ``priority_queue.f90``

    implementation of a priority queue. Provieds fast access to
    the element with the biggest key and a method for decreasing
    keys, which removes elements automatically, once a key is
    reduced to 0.

  + ``loops2_naive.f90``

    program running the naive version of the affinity schedule.

  + ``loops2_queue.f90``

    program running the version of the affinity schedule,.which
    is based on the priority queue.

* ``out/``

   directory containing output generated by ``test.sh`` and
   from the serial version of ``loops2``, in order to perform
   regression tests and see if the implementation of the
   affinity schedule is correct.

* ``Makefile``

  script for building the executables.

* ``test.sh``

  script for regression testing the executables.
